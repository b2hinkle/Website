@*
    This component provides the ability to parallax by providing .ParallaxContainer and .ParallaxElement classes and data-parallaxspeed data attribute. Parallax transformations done on GPU
    Workflow:
    - .ParallaxElement: Actual element that will parallax
        - must be an immediate child of .ParallaxContainer
    - data-parallaxspeed: Data attribute placed on ParallaxElement to modify its scroll speed (it's a multiplier)
        - 1 is normal scroll speed
        - 0 is no scrolling
    - .ParallaxContainer: Determines the parallax positioning of its parallax elements. Any parallax element should be at its original position when the container reaches the middle of the viewport.
*@
@inject IJSRuntime jsRuntime;
@code 
{
    private IJSObjectReference jsObjRef;    // js interactor
    
    [Parameter]
    public bool autoInit { get; set; } = true;
    [Parameter]
    public string wrapperID { get; set; } = "ParallaxWrapper";
    [Parameter]
    public string parallaxContainerClass { get; set; } = ".ParallaxContainer";
    [Parameter]
    public string parallaxElementClass { get; set; } = ".ParallaxElement";
    [Parameter]
    public float wrapperSpeed { get; set; } = 1;
    [Parameter]
    public bool allowOnMobile { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsObjRef = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Shared/Components/Animation/Parallax.razor.js");
            if (autoInit)
            {
                await Init();
            }
        }
    }
    public async Task Init()
    {
        await jsObjRef.InvokeVoidAsync("Init", wrapperID, parallaxContainerClass, parallaxElementClass, wrapperSpeed, allowOnMobile);
    }
}
