@page "/Portfolio"
@using Website.Shared.Components
@layout Shared.Layouts.EmptyLayout;
@inject IJSRuntime jsRuntime;
@inject NavigationManager NavManager;

<nav id="PortfolioNavbar" class="navbar fixed-top navbar-expand-sm navbar-dark bg-dark">
	<div  class="container-fluid">
	    <a href="#" class="navbar-brand mb-0 h1">Brian Hinkle</a>
        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
        
		<div class="collapse navbar-collapse" id="navbarNav">
            <ul class="nav-pills navbar-nav ms-auto">
                @*
                    We can't use standard href functionality here.
                    The problem is that while the Bootstrap ScrollSpy feature requires us to do the normal thing and just put the hash to the section we want to scroll to, Blazor needs us to put the full url path to the section (and also use our custom AnchorNavigation component), otherwise it just scrolls to the way top.
                    Not only does it scroll to the way top, but ScrollSpy also doesn't know how to work with a full url path and gives us a runtime error (because standard practice is to just do the hash
                *@
                <li class="nav-item">
                    <a class="nav-link" @onclick:preventDefault href="#portfolio"   @onclick="@( () => NavManager.NavigateTo(pageUrl + "#portfolio") )"   >Portfolio</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" @onclick:preventDefault href="#about"       @onclick="@( () => NavManager.NavigateTo(pageUrl + "#about")     )"       >About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" @onclick:preventDefault href="#contact"     @onclick="@( () => NavManager.NavigateTo(pageUrl + "#contact")   )"     >Contact</a>
                </li>
            </ul>
		</div>
	</div>
</nav>



<h4 id="portfolio">Portfolio</h4>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<h4 id="about">About</h4>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<h4 id="contact">Contact</h4>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>










@*add our custom component at the end to make the hashed paths work right (so it can scroll to the right element)*@
<AnchorNavigation/>




@code{
    string pageUrl;
    IJSObjectReference jsObjRef;    // js interactor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            pageUrl = NavManager.Uri;
            jsObjRef = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Portfolio.razor.js");
            await jsObjRef.InvokeVoidAsync("init");
        }
    }
}
